<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Storage;

class ProfileController extends Controller
{
    /* --------------------------------------------------
     * ðŸ”¹ BAGIAN 1 â€” PROFIL USER
     * -------------------------------------------------- */

    // Ambil profil user
    public function show(Request $request)
    {
        return response()->json($request->user());
    }

    // Upload / update foto profil
    public function uploadFoto(Request $request)
    {
        $request->validate([
            'id_user' => 'required|exists:user,id_user',
            'foto_profile' => 'required|image|mimes:jpg,jpeg,png|max:2048',
        ]);

        // Ambil user
        $user = DB::table('user')->where('id_user', $request->id_user)->first();

        // Hapus foto lama (jika ada)
        if ($user && $user->foto_profile && Storage::exists(str_replace('storage/', 'public/', $user->foto_profile))) {
            Storage::delete(str_replace('storage/', 'public/', $user->foto_profile));
        }

        // Upload foto baru
        $path = $request->file('foto_profile')->store('foto_profile', 'public');

        DB::table('user')->where('id_user', $request->id_user)
            ->update(['foto_profile' => 'storage/' . $path]);

        return response()->json([
            'success' => true,
            'message' => 'Foto profil berhasil diupload',
            'path' => asset('storage/' . $path)
        ]);
    }


    /* --------------------------------------------------
     * ðŸ”¹ BAGIAN 2 â€” GAMBAR LAYANAN TEKNISI
     * -------------------------------------------------- */

    // Upload gambar layanan
    public function uploadGambarLayanan(Request $request)
    {
        $request->validate([
            'id_teknisi' => 'required|exists:teknisi,id_teknisi',
            'id_keahlian' => 'required|exists:keahlian,id_keahlian',
            'gambar' => 'required|image|mimes:jpg,jpeg,png|max:4096',
        ]);

        // Upload file ke storage/public/gambar_layanan
        $path = $request->file('gambar')->store('gambar_layanan', 'public');

        // Simpan ke DB
        $id = DB::table('gambar_layanan')->insertGetId([
            'id_teknisi' => $request->id_teknisi,
            'id_keahlian' => $request->id_keahlian,
            'nama_file' => $request->file('gambar')->getClientOriginalName(),
            'url_gambar' => 'storage/' . $path,
            'created_at' => now(),
        ]);

        return response()->json([
            'success' => true,
            'message' => 'Gambar layanan berhasil diupload',
            'id_gambar' => $id,
            'url' => asset('storage/' . $path)
        ]);
    }

    // Ambil semua gambar layanan milik teknisi
    // âœ… Ambil semua gambar layanan milik teknisi
    public function getGambarLayananByTeknisi($id_teknisi)
    {
        $gambarList = DB::table('gambar_layanan')
            ->join('keahlian', 'gambar_layanan.id_keahlian', '=', 'keahlian.id_keahlian')
            ->select(
                'gambar_layanan.id_gambar',
                'gambar_layanan.url_gambar', // ganti dari path_gambar
                'keahlian.nama_keahlian',
                'keahlian.deskripsi'
            )
            ->where('gambar_layanan.id_teknisi', $id_teknisi)
            ->get();

        foreach ($gambarList as $gambar) {
            $gambar->url = Storage::url($gambar->url_gambar);
        }

        if ($gambarList->isEmpty()) {
            return response()->json([
                'success' => true,
                'message' => 'Belum ada gambar layanan untuk teknisi ini',
                'data' => [],
            ]);
        }

        return response()->json([
            'success' => true,
            'data' => $gambarList
        ]);
    }



    // Hapus gambar layanan
    public function deleteGambarLayanan($id)
    {
        $gambar = DB::table('gambar_layanan')->where('id_gambar', $id)->first();

        if (!$gambar) {
            return response()->json(['error' => 'Gambar tidak ditemukan'], 404);
        }

        // Hapus file fisik dari storage
        if (Storage::exists(str_replace('storage/', 'public/', $gambar->url_gambar))) {
            Storage::delete(str_replace('storage/', 'public/', $gambar->url_gambar));
        }

        // Hapus dari database
        DB::table('gambar_layanan')->where('id_gambar', $id)->delete();

        return response()->json(['success' => true, 'message' => 'Gambar layanan berhasil dihapus']);
    }


    /* --------------------------------------------------
     * ðŸ”¹ BAGIAN 3 â€” BUKTI PEKERJAAN (opsional)
     * -------------------------------------------------- */

    // ðŸ”¹ Ambil semua bukti pekerjaan berdasarkan id_teknisi
        public function getBuktiPekerjaanByTeknisi($id_teknisi)
    {
        $buktiList = DB::table('bukti_pekerjaan')
            ->join('keahlian', 'bukti_pekerjaan.id_keahlian', '=', 'keahlian.id_keahlian')
            ->leftJoin('pemesanan', 'bukti_pekerjaan.id_pemesanan', '=', 'pemesanan.id_pemesanan')
            ->select(
                'bukti_pekerjaan.id_bukti',
                'bukti_pekerjaan.deskripsi',
                'bukti_pekerjaan.foto_bukti',
                'keahlian.nama_keahlian',
                'pemesanan.kode_pemesanan',
                'bukti_pekerjaan.created_at'
            )
            ->where('bukti_pekerjaan.id_teknisi', $id_teknisi)
            ->orderBy('bukti_pekerjaan.created_at', 'desc')
            ->get();

        foreach ($buktiList as $bukti) {
            // Pastikan foto_bukti sudah pakai format 'storage/...'
            $bukti->url = Storage::url($bukti->foto_bukti);
        }

        if ($buktiList->isEmpty()) {
            return response()->json([
                'success' => true,
                'message' => 'Belum ada bukti pekerjaan untuk teknisi ini',
                'data' => [],
            ]);
        }

        return response()->json([
            'success' => true,
            'data' => $buktiList,
        ]);
    }


}
